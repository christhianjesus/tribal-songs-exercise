// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entities "christhianguevara/songs-search-exercise/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SongsResource is an autogenerated mock type for the SongsResource type
type SongsResource struct {
	mock.Mock
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *SongsResource) Search(_a0 context.Context, _a1 *entities.SearchParams) ([]entities.Song, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entities.Song
	if rf, ok := ret.Get(0).(func(context.Context, *entities.SearchParams) []entities.Song); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Song)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.SearchParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSongsResource interface {
	mock.TestingT
	Cleanup(func())
}

// NewSongsResource creates a new instance of SongsResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSongsResource(t mockConstructorTestingTNewSongsResource) *SongsResource {
	mock := &SongsResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
