// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	redis "github.com/go-redis/redis/v9"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CacheClient is an autogenerated mock type for the CacheClient type
type CacheClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *CacheClient) Get(_a0 context.Context, _a1 string) *redis.StringCmd {
	ret := _m.Called(_a0, _a1)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CacheClient) Set(_a0 context.Context, _a1 string, _a2 interface{}, _a3 time.Duration) *redis.StatusCmd {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *redis.StatusCmd); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

type mockConstructorTestingTNewCacheClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheClient creates a new instance of CacheClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheClient(t mockConstructorTestingTNewCacheClient) *CacheClient {
	mock := &CacheClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
