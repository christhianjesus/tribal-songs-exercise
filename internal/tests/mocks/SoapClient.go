// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gosoap "github.com/tiaguinho/gosoap"
)

// SoapClient is an autogenerated mock type for the SoapClient type
type SoapClient struct {
	mock.Mock
}

// Call provides a mock function with given fields: _a0, _a1
func (_m *SoapClient) Call(_a0 string, _a1 gosoap.SoapParams) (*gosoap.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gosoap.Response
	if rf, ok := ret.Get(0).(func(string, gosoap.SoapParams) *gosoap.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gosoap.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, gosoap.SoapParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSoapClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSoapClient creates a new instance of SoapClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSoapClient(t mockConstructorTestingTNewSoapClient) *SoapClient {
	mock := &SoapClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
